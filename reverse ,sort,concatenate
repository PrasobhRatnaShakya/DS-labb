#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* next;
};

struct node* createNode(int data) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void append(struct node** head, int data) {
    struct node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void display(struct node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    struct node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void reverse(struct node** head) {
    struct node* prev = NULL;
    struct node* curr = *head;
    struct node* next = NULL;

    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    *head = prev;
}

void sort(struct node* head) {
    if (head == NULL || head->next == NULL) {
        return;
    }

    struct node* i;
    struct node* j;
    int temp;


    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

void concatenate(struct node** head1, struct node* head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }

    struct node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;  // Traverse to the last node
    }
    temp->next = head2;  // Link the last node of list1 to the head of list2
}

int main() {
    struct node* list1 = NULL;
    struct node* list2 = NULL;

    append(&list1, 10);
    append(&list1, 20);
    append(&list1, 30);
    append(&list1, 5);

    append(&list2, 15);
    append(&list2, 25);

    printf("Original List 1: ");
    display(list1);

    printf("Original List 2: ");
    display(list2);


    reverse(&list1);
    printf("Reversed List 1: ");
    display(list1);


    sort(list1);
    printf("Sorted List 1: ");
    display(list1);


    concatenate(&list1, list2);
    printf("Concatenated List: ");
    display(list1);

    return 0;
}
